#!/bin/bash

# WPST Panel - WordPress Stack Tool
# Phi√™n b·∫£n: 1.0.0

# ƒê∆∞·ªùng d·∫´n c·∫•u h√¨nh
WPST_DIR="/opt/wpst"
SITES_DIR="/var/www"
CONFIG_DIR="$WPST_DIR/config"
LOG_DIR="$WPST_DIR/logs"

# Load common functions n·∫øu c√≥
if [[ -f "$WPST_DIR/lib/common.sh" ]]; then
    source "$WPST_DIR/lib/common.sh"
fi

# M√†u s·∫Øc (ƒë·ªãnh nghƒ©a sau khi load common.sh ƒë·ªÉ tr√°nh conflict)
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Export c√°c bi·∫øn m√†u ƒë·ªÉ s·ª≠ d·ª•ng trong functions
export RED GREEN YELLOW BLUE PURPLE CYAN WHITE NC

# Functions c∆° b·∫£n n·∫øu kh√¥ng c√≥ common.sh
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[L·ªñI]${NC} $1"
    exit 1
}

warning() {
    echo -e "${YELLOW}[C·∫¢NH B√ÅO]${NC} $1"
}

info() {
    echo -e "${BLUE}[TH√îNG TIN]${NC} $1"
}

success() {
    echo -e "${GREEN}[TH√ÄNH C√îNG]${NC} $1"
}

# ASCII Logo
show_ascii_logo() {
    echo -e "${CYAN}"
    cat << 'EOF'
 ########                                         
##########        ##########       ###########    
###########      ############     ############### 
###########     ##############   #################
 ###########    ###############  #################
 ###########    ###############  ######      #####
  ###########   ######## ####### ######      #####
  ###########  ######### ####### ###### ##########
   ########### ######### ####### ###### ######### 
    ########## #########  ###### ###### #1.0.0   
    ########## ########   #############           
     ##################    ###########            
      ################      #########             
       ##############         ####                
          #########
EOF
    echo -e "${NC}"
}

# System stats functions
get_system_stats() {
    local hostname=$(hostname)
    local ip=$(get_server_ip)
    local uptime=$(uptime -p 2>/dev/null || echo "Unknown")
    local load=$(uptime | awk -F'load average:' '{ print $2 }' | sed 's/^ *//; s/,//g' 2>/dev/null || echo "Unknown")
    # Memory info - s·ª≠ d·ª•ng RAM th·∫≠t nh∆∞ htop
    local mem_total=$(free -m | awk 'NR==2{print $2}')
    local mem_used=$(free -m | awk 'NR==2{print $3}')
    local mem_available=$(free -m | awk 'NR==2{print $7}')
    local mem_percent=$((mem_used * 100 / mem_total))
    local memory="${mem_used}M/${mem_total}M (${mem_percent}%)"
    local disk=$(df -h / | awk 'NR==2{printf "%s/%s (%s)", $3, $2, $5}' 2>/dev/null || echo "Unknown")
    local cpu_info=$(lscpu | grep "Model name" | cut -d: -f2 | sed 's/^ *//' 2>/dev/null || echo "Unknown")
    local cpu_cores=$(nproc 2>/dev/null || echo "Unknown")
    # L·∫•y CPU usage
    local cpu_usage="Unknown"
    if command -v mpstat >/dev/null 2>&1; then
        cpu_usage=$(mpstat 1 1 | awk 'NR==4{printf "%.1f", 100-$NF}')
    elif command -v vmstat >/dev/null 2>&1; then
        cpu_usage=$(vmstat 1 2 | awk 'NR==3{printf "%.1f", 100-$15}')
    elif [[ -f /proc/stat ]]; then
        # Fallback: t√≠nh t·ª´ /proc/stat (kh√¥ng ch√≠nh x√°c l·∫Øm)
        local cpu_line=$(head -1 /proc/stat)
        local user=$(echo $cpu_line | awk '{print $2}')
        local nice=$(echo $cpu_line | awk '{print $3}')
        local system=$(echo $cpu_line | awk '{print $4}')
        local idle=$(echo $cpu_line | awk '{print $5}')
        local total=$((user + nice + system + idle))
        local used=$((user + nice + system))
        if [[ $total -gt 0 ]]; then
            cpu_usage=$((used * 100 / total))
        fi
    fi
    local os_info=$(cat /etc/os-release | grep PRETTY_NAME | cut -d'"' -f2 2>/dev/null || echo "Unknown")
    
    echo -e "${CYAN}IP:         ${WHITE}$ip${NC}"
    echo -e "${CYAN}OS:         ${WHITE}$os_info${NC}"
    echo -e "${CYAN}Uptime:     ${WHITE}$uptime${NC}"
    echo -e "${CYAN}Load:       ${WHITE}$load${NC}"
    echo -e "${CYAN}CPU:        ${WHITE}${cpu_usage}%${NC}"
    echo -e "${CYAN}Memory:     ${WHITE}$memory${NC}"
    echo -e "${CYAN}Disk:       ${WHITE}$disk${NC}"
}

get_service_status() {
    local frankenphp_status=$(systemctl is-active frankenphp 2>/dev/null || echo "Unknown")
    local mariadb_status=$(systemctl is-active mariadb 2>/dev/null || echo "Unknown")
    
    # L·∫•y version c·ªßa FrankenPHP - ch·ªâ l·∫•y ph·∫ßn c·∫ßn thi·∫øt
    local frankenphp_version="Unknown"
    if command -v frankenphp >/dev/null 2>&1; then
        frankenphp_version=$(frankenphp -v 2>/dev/null | head -1 | sed 's/.*FrankenPHP v\([^ ]*\) PHP.*/\1/' || echo "Unknown")
    fi
    
    # L·∫•y version c·ªßa MariaDB - ch·ªâ l·∫•y s·ªë version
    local mariadb_version="Unknown"
    if command -v mariadb >/dev/null 2>&1; then
        mariadb_version=$(mariadb --version 2>/dev/null | sed 's/.*from \([0-9.]*\)-MariaDB.*/\1/' || echo "Unknown")
    fi
    
    echo -e "${CYAN}Services: ${NC}"
    echo -e "FrankenPHP:    $(show_status_indicator "$frankenphp_status") ${frankenphp_status} (v${frankenphp_version})"
    echo -e "MariaDB:       $(show_status_indicator "$mariadb_status") ${mariadb_status} (v${mariadb_version})"
}

get_sites_count() {
    local count=0
    if [[ -d "$SITES_DIR" ]]; then
        count=$(find "$SITES_DIR" -maxdepth 1 -type d | wc -l)
        count=$((count - 1)) # Tr·ª´ ƒëi th∆∞ m·ª•c g·ªëc
    fi
    echo "$count"
}

show_status_indicator() {
    local status="$1"
    case "$status" in
        "active"|"running")
            echo -e "${GREEN}‚óè${NC}"
            ;;
        "inactive"|"stopped"|"Unknown")
            echo -e "${RED}‚óè${NC}"
            ;;
        *)
            echo -e "${YELLOW}‚óè${NC}"
            ;;
    esac
}

get_server_ip() {
    # L·∫•y IP public c·ªßa server
    local ip
    ip=$(curl -s -4 ifconfig.me 2>/dev/null) || \
    ip=$(curl -s -4 ipinfo.io/ip 2>/dev/null) || \
    ip=$(hostname -I | awk '{print $1}')
    echo "$ip"
}

# Dashboard ch√≠nh
show_main_dashboard() {
    clear
    
    # B·ªë c·ª•c m·ªõi: Logo b√™n ph·∫£i, th√¥ng tin h·ªá th·ªëng b√™n tr√°i
    echo -e "${CYAN}"
    # Logo b√™n ph·∫£i
    cat << 'EOF'
 ########                                         
##########        ##########       ###########    
###########      ############     ############### 
###########     ##############   #################
 ###########    ###############  #################
 ###########    ###############  ######      #####
  ###########   ######## ####### ######      #####
  ###########  ######### ####### ###### ##########
   ########### ######### ####### ###### ######### 
    ########## #########  ###### ###### #1.0.0   
    ########## ########   #############           
     ##################    ###########            
      ################      #########             
       ##############         ####                
          #########
EOF
    echo -e "${NC}"
    echo ""
    
    # Th√¥ng tin h·ªá th·ªëng b√™n tr√°i
    echo -e "${BLUE}üìä TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # Th√¥ng tin h·ªá th·ªëng
    get_system_stats
    echo ""
    get_service_status
    echo ""
    
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "2. Firewall / Security"
    echo "4. C·∫≠p nh·∫≠t FrankenPHP"
    echo "5. Restart FrankenPHP"
    echo "6. Ph√¢n quy·ªÅn FrankenPHP"
    echo "8. Restart MariaDB"
    echo ""
    echo "0. Tho√°t (ho·∫∑c b·∫•m q ƒë·ªÉ tho√°t ngay l·∫≠p t·ª©c)"
    
    echo ""
    read -p "L·ª±a ch·ªçn (0-9): " choice
    
    
    case $choice in
        2)
            show_firewall_dashboard
            ;;
        4)
            update_frankenphp
            ;;
        5)
            restart_frankenphp
            ;;
        6)
            manage_frankenphp_permissions
            ;;
        8)
            restart_mariadb
            ;;
        0|q)
            echo -e "${GREEN}C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng WPST Panel!${NC}"
            exit 0
            ;;
        *)
            warning "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."
            sleep 1
            show_main_dashboard
            ;;
    esac
}

# Sites Dashboard
show_sites_dashboard() {
    clear
    show_header "Qu·∫£n l√Ω Website"
    
    # Ph·∫ßn Status - danh s√°ch websites
    echo -e "${BLUE}üåê DANH S√ÅCH WEBSITE${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    local sites=()
    if [[ -d "$SITES_DIR" ]]; then
        for site_dir in "$SITES_DIR"/*; do
            if [[ -d "$site_dir" ]]; then
                sites+=($(basename "$site_dir"))
            fi
        done
    fi
    
    if [[ ${#sites[@]} -eq 0 ]]; then
        echo -e "${YELLOW}Ch∆∞a c√≥ website n√†o ƒë∆∞·ª£c t·∫°o.${NC}"
        echo ""
    else
        # Hi·ªÉn th·ªã b·∫£ng sites
        print_sites_table "${sites[@]}"
        echo ""
    fi
    
    # Ph·∫ßn Menu ph·ª•
    echo -e "${BLUE}üìã MENU PH·ª§${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    if [[ ${#sites[@]} -gt 0 ]]; then
        echo "Ch·ªçn s·ªë ƒë·ªÉ qu·∫£n l√Ω website:"
        for i in "${!sites[@]}"; do
            echo "$((i+1)). ${sites[i]}"
        done
        echo ""
    fi
    
    echo "n. Th√™m website m·ªõi"
    echo "f. Restart FrankenPHP"
    echo "m. Restart MariaDB"
    echo "p. Update Permission FrankenPHP"
    echo "u. Update FrankenPHP"
    echo "0. Quay l·∫°i dashboard ch√≠nh"
    echo "q. Tho√°t"
    
    echo ""
    echo -e "${CYAN}üí° TH√îNG TIN:${NC}"
    echo "‚Ä¢ ƒê·ªÉ s·ª≠a c·∫•u h√¨nh Caddy: sudo nano /etc/frankenphp/Caddyfile"
    echo "‚Ä¢ ƒê·ªÉ s·ª≠a c·∫•u h√¨nh PHP: sudo nano /etc/frankenphp/php.ini"
    echo "‚Ä¢ Sau khi ch·ªânh s·ª≠a, c·∫ßn Restart FrankenPHP (f) ho·∫∑c: sudo systemctl restart frankenphp"
    echo ""
    
    read -p "L·ª±a ch·ªçn: " choice
    
    case $choice in
        [1-9]|[1-9][0-9])
            if [[ $choice -le ${#sites[@]} ]]; then
                local selected_site="${sites[$((choice-1))]}"
                show_single_site_dashboard "$selected_site"
            else
                warning "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."
                sleep 1
                show_sites_dashboard
            fi
            ;;
        n|N)
            add_new_site
            ;;
        f|F)
            restart_frankenphp
            ;;
        m|M)
            restart_mariadb
            ;;
        p|P)
            manage_frankenphp_permissions
            ;;
        u|U)
            update_frankenphp
            ;;
        0)
            show_main_dashboard
            ;;
        q|Q)
            echo -e "${GREEN}C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng WPST Panel!${NC}"
            exit 0
            ;;
        *)
            warning "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."
            sleep 1
            show_sites_dashboard
            ;;
    esac
}

# Print sites table
print_sites_table() {
    local sites=("$@")
    
    # Table header
    printf "%-25s %-8s %-8s %-8s %-12s %-12s %-10s\n" "Domain" "Status" "Ping" "Backup" "Size" "Total" "SSL"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    
    for site in "${sites[@]}"; do
        local status=$(get_site_status "$site")
        local ping_status=$(check_site_ping "$site")
        local backup_count=$(count_site_backups "$site")
        local public_size=$(get_directory_size "$SITES_DIR/$site/public")
        local total_size=$(get_directory_size "$SITES_DIR/$site")
        local ssl_status=$(get_ssl_status "$site")
        
        printf "%-25s %-8s %-8s %-8s %-12s %-12s %-10s\n" \
            "$site" \
            "$status" \
            "$ping_status" \
            "$backup_count" \
            "$public_size" \
            "$total_size" \
            "$ssl_status"
    done
}

# Site status functions
get_site_status() {
    local domain="$1"
    if [[ -f "$SITES_DIR/$domain/Caddyfile" ]]; then
        echo "ON"
    else
        echo "OFF"
    fi
}

check_site_ping() {
    local domain="$1"
    if curl -s --max-time 5 -I "https://$domain" >/dev/null 2>&1; then
        echo "‚úÖ"
    else
        echo "‚ùå"
    fi
}

count_site_backups() {
    local domain="$1"
    local backup_dir="$SITES_DIR/$domain/backup"
    if [[ -d "$backup_dir" ]]; then
        find "$backup_dir" -name "*.tar.gz" -type f 2>/dev/null | wc -l
    else
        echo "0"
    fi
}

get_directory_size() {
    local dir="$1"
    if [[ -d "$dir" ]]; then
        du -sh "$dir" 2>/dev/null | cut -f1
    else
        echo "0B"
    fi
}

get_ssl_status() {
    local domain="$1"
    if [[ -f "$SITES_DIR/$domain/ssl/cert.pem" ]]; then
        echo "Custom"
    else
        echo "Auto"
    fi
}

# Single site management
show_single_site_dashboard() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    local public_dir="$site_dir/public"
    
    clear
    show_header "Qu·∫£n l√Ω Website: $domain"
    
    # Ph·∫ßn Status - th√¥ng tin chi ti·∫øt site
    echo -e "${BLUE}üìã TH√îNG TIN WEBSITE${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    show_site_details "$domain"
    
    echo ""
    echo -e "${BLUE}üìã MENU QU·∫¢N L√ù${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "1. Caddyfile"
    echo "2. C√†i ƒë·∫∑t SSL th·ªß c√¥ng"
    
    # Ki·ªÉm tra tr·∫°ng th√°i TinyFileManager
    local tinyfilemanager_files=$(find "$public_dir" -name "tinyfilemanager_*.php" 2>/dev/null | wc -l)
    if [[ $tinyfilemanager_files -gt 0 ]]; then
        echo "3. TinyFileManager - (ƒêANG B·∫¨T)"
    else
        echo "3. TinyFileManager - (ƒêANG T·∫ÆT)"
    fi
    
    echo "4. Database"
    echo "5. Backup & Restore"
    
    # Hi·ªÉn th·ªã menu b·∫≠t/t·∫Øt ƒë·ªông
    local site_status=$(get_site_status "$domain")
    if [[ "$site_status" == "ON" ]]; then
        echo "6. T·∫Øt website"
    else
        echo "6. B·∫≠t website"
    fi
    
    echo "7. X√≥a website"
    echo ""
    echo "0. Quay l·∫°i danh s√°ch website"
    echo "q. Tho√°t"
    echo ""
    
    read -p "L·ª±a ch·ªçn: " choice
    
    case $choice in
        1)
            edit_caddyfile "$domain"
            ;;
        2)
            setup_custom_ssl "$domain"
            ;;
        3)
            setup_tinyfilemanager "$domain"
            ;;
        4)
            manage_database "$domain"
            ;;
        5)
            backup_restore_site "$domain"
            ;;
        6)
            toggle_site_status "$domain"
            ;;
        7)
            delete_site "$domain"
            ;;
        0)
            show_sites_dashboard
            ;;
        q|Q)
            echo -e "${GREEN}C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng WPST Panel!${NC}"
            exit 0
            ;;
        *)
            warning "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."
            sleep 1
            show_single_site_dashboard "$domain"
            ;;
    esac
}

# Site details
show_site_details() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    

    echo -e "Domain:        ${GREEN}$domain${NC}"
    
    # SSL info
    local ssl_info=$(get_ssl_info "$domain")
    echo -e "SSL:           $ssl_info"
    
    # Storage info
    local public_size=$(get_directory_size "$site_dir/public")
    local total_size=$(get_directory_size "$site_dir")
    echo -e "Dung l∆∞·ª£ng:    Public ${GREEN}$public_size${NC} / Total ${GREEN}$total_size${NC}"
    
    # Database info
    local db_config_file="$site_dir/configs/database.conf"
    if [[ -f "$db_config_file" ]]; then
        source "$db_config_file"
        local db_size=$(get_database_size "$DB_NAME")
        echo -e "Database:      ${GREEN}$DB_NAME${NC} (${GREEN}$db_size${NC})"
        echo -e "DB User:       ${GREEN}$DB_USER${NC}"
        echo -e "DB Password:   ${GREEN}ƒê√£ l∆∞u trong config${NC}"
    else
        echo -e "Database:      ${YELLOW}Kh√¥ng c√≥${NC}"
    fi
    
    # Status
    local status=$(get_site_status "$domain")
    if [[ "$status" == "ON" ]]; then
        echo -e "Tr·∫°ng th√°i:        ${GREEN}Online${NC}"
    else
        echo -e "üî¥ Tr·∫°ng th√°i:     ${RED}Offline${NC}"
    fi
}

get_ssl_info() {
    local domain="$1"
    
    # Ki·ªÉm tra custom SSL
    if [[ -f "$SITES_DIR/$domain/ssl/cert.pem" ]]; then
        local expiry=$(openssl x509 -in "$SITES_DIR/$domain/ssl/cert.pem" -noout -enddate 2>/dev/null | cut -d= -f2)
        if [[ -n "$expiry" ]]; then
            echo -e "${BLUE}Custom${NC} (H·∫øt h·∫°n: $expiry)"
        else
            echo -e "${YELLOW}Custom (Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c)${NC}"
        fi
    else
        # Ki·ªÉm tra Let's Encrypt
        local cert_path="/var/lib/caddy/.local/share/caddy/certificates/acme-v02.api.letsencrypt.org-directory/$domain"
        if [[ -f "$cert_path/$domain.crt" ]]; then
            local expiry=$(openssl x509 -in "$cert_path/$domain.crt" -noout -enddate 2>/dev/null | cut -d= -f2)
            if [[ -n "$expiry" ]]; then
                echo -e "${GREEN}Let's Encrypt${NC} (H·∫øt h·∫°n: $expiry)"
            else
                echo -e "${GREEN}Let's Encrypt${NC}"
            fi
        else
            echo -e "${YELLOW}Ch∆∞a c√≥ SSL${NC}"
        fi
    fi
}

get_site_database_info() {
    local domain="$1"
    local db_name=$(echo "$domain" | sed 's/\./_/g')_db
    
    if database_exists "$db_name"; then
        local db_size=$(get_database_size "$db_name")
        echo -e "${GREEN}$db_name${NC} ($db_size)"
    else
        echo -e "${RED}Ch∆∞a c√≥ database${NC}"
    fi
}

# Database functions
database_exists() {
    local db_name="$1"
    load_db_config
    mysql -u root -p"$DB_ROOT_PASSWORD" -e "USE $db_name;" 2>/dev/null
    return $?
}



get_database_size() {
    local db_name="$1"
    load_db_config
    
    local size_bytes=$(mysql -u root -p"$DB_ROOT_PASSWORD" -e "
        SELECT ROUND(SUM(data_length + index_length), 1) AS 'DB Size in Bytes' 
        FROM information_schema.tables 
        WHERE table_schema='$db_name';" -s -N 2>/dev/null)
    
    if [[ -n "$size_bytes" && "$size_bytes" != "NULL" ]]; then
        format_bytes "$size_bytes"
    else
        echo "0B"
    fi
}

load_db_config() {
    if [[ -f "$CONFIG_DIR/mariadb_root.conf" ]]; then
        source "$CONFIG_DIR/mariadb_root.conf"
    else
        error "Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh database."
    fi
}

format_bytes() {
    local bytes="$1"
    
    if [[ $bytes -ge 1073741824 ]]; then
        echo "$(( bytes / 1073741824 ))GB"
    elif [[ $bytes -ge 1048576 ]]; then
        echo "$(( bytes / 1048576 ))MB"
    elif [[ $bytes -ge 1024 ]]; then
        echo "$(( bytes / 1024 ))KB"
    else
        echo "${bytes}B"
    fi
}

# Add new site function
add_new_site() {
    clear
    show_header "Th√™m Website M·ªõi"
    
    # Nh·∫≠p domain
    local domain
    while true; do
        echo -e "\n${BLUE}Nh·∫≠p t√™n domain:${NC}"
        read -p "Domain: " domain
        domain=$(trim "$domain")
        
        # Validate domain format
        if ! validate_domain "$domain"; then
            warning "Domain kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i."
            continue
        fi
        
        # Ki·ªÉm tra tr√πng l·∫∑p
        if site_exists "$domain"; then
            warning "Domain $domain ƒë√£ t·ªìn t·∫°i. Vui l√≤ng ch·ªçn domain kh√°c."
            continue
        fi
        
        break
    done
    
    # Ki·ªÉm tra DNS
    info "Ki·ªÉm tra DNS pointing..."
    local server_ip=$(get_server_ip)
    
    if ! check_dns_pointing "$domain" "$server_ip"; then
        show_warning_box "DNS Ch∆∞a Tr·ªè ƒê√∫ng" "Domain $domain ch∆∞a tr·ªè v·ªÅ IP $server_ip.\nN·∫øu s·ª≠ d·ª•ng Cloudflare, vui l√≤ng t·∫°m th·ªùi t·∫Øt Proxy.\nB·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c nh∆∞ng SSL c√≥ th·ªÉ kh√¥ng ho·∫°t ƒë·ªông."
        
        if ! read_confirm "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c?" "n"; then
            return
        fi
    else
        success "Domain $domain ƒë√£ tr·ªè ƒë√∫ng v·ªÅ IP $server_ip"
    fi
    
    # Ki·ªÉm tra conflict th∆∞ m·ª•c
    if [[ -d "$SITES_DIR/$domain" ]]; then
        error "Th∆∞ m·ª•c $SITES_DIR/$domain ƒë√£ t·ªìn t·∫°i. Vui l√≤ng x√≥a trong Qu·∫£n l√Ω website tr∆∞·ªõc."
        return 1
    fi
    
    # X√°c nh·∫≠n t·∫°o database
    local create_database="y"
    echo -e "\n${BLUE}T·∫°o database cho website n√†y?${NC}"
    read -p "T·∫°o database [Y/n]: " create_db_input
    create_database=${create_db_input:-y}
    
    # Ki·ªÉm tra database ƒë√£ t·ªìn t·∫°i ch∆∞a
    local db_name=$(echo "$domain" | sed 's/\./_/g')_db
    local db_user=$(echo "$domain" | sed 's/\./_/g')_user
    
    if database_exists "$db_name" || user_exists "$db_user"; then
        warning "Database ho·∫∑c user ƒë√£ t·ªìn t·∫°i:"
        echo "   Database: $db_name"
        echo "   User: $db_user"
        echo ""
        
        if ! read_confirm "B·∫°n c√≥ mu·ªën x√≥a database c≈© v√† t·∫°o m·ªõi?" "n"; then
            info "ƒê√£ h·ªßy t·∫°o website."
            return 1
        fi
        
        # X√≥a database c≈©
        info "ƒêang x√≥a database c≈©..."
        drop_site_database "$db_name" "$db_user"
    fi
    
    # X√°c nh·∫≠n c√†i WordPress
    local install_wordpress
    while true; do
        echo -e "\n${BLUE}C√†i ƒë·∫∑t WordPress?${NC}"
        read -p "C√†i WordPress [Y/n]: " install_wordpress
        case "$install_wordpress" in
            [Yy]*|"") install_wordpress="y"; break ;;
            [Nn]*) install_wordpress="n"; break ;;
            *) warning "Vui l√≤ng nh·∫≠p y ho·∫∑c n." ;;
        esac
    done
    
    # B·∫Øt ƒë·∫ßu qu√° tr√¨nh t·∫°o site
    info "B·∫Øt ƒë·∫ßu t·∫°o website $domain..."
    
    # T·∫°o site v·ªõi rollback support
    if create_site_with_rollback "$domain" "$create_database" "$install_wordpress"; then
        show_site_creation_summary "$domain"
    else
        error "T·∫°o website th·∫•t b·∫°i."
    fi
}

edit_caddyfile() {
    local domain="$1"
    echo "Ch·ªânh s·ª≠a Caddyfile cho $domain - ƒêang ph√°t tri·ªÉn..."
    sleep 2
    show_single_site_dashboard "$domain"
}

setup_custom_ssl() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    
    clear
    show_header "C√†i ƒë·∫∑t SSL th·ªß c√¥ng: $domain"
    
    echo -e "${BLUE}üìã H∆Ø·ªöNG D·∫™N UPLOAD SSL${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "1. Upload 2 file SSL v√†o th∆∞ m·ª•c: ${GREEN}$site_dir/ssl/${NC}"
    echo "   - ${GREEN}$domain.crt${NC} (Certificate file)"
    echo "   - ${GREEN}$domain.key${NC} (Private key file)"
    echo ""
    echo "2. Sau khi upload xong, quay l·∫°i menu n√†y ƒë·ªÉ c·∫•u h√¨nh."
    echo ""
    
    # Ki·ªÉm tra tr·∫°ng th√°i file SSL
    local cert_file="$site_dir/ssl/$domain.crt"
    local key_file="$site_dir/ssl/$domain.key"
    
    echo -e "${BLUE}üìä TR·∫†NG TH√ÅI FILE SSL${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    if [[ -f "$cert_file" ]]; then
        echo -e "‚úÖ Certificate file: ${GREEN}$domain.crt${NC}"
    else
        echo -e "‚ùå Certificate file: ${RED}$domain.crt${NC} (Ch∆∞a c√≥)"
    fi
    
    if [[ -f "$key_file" ]]; then
        echo -e "‚úÖ Private key file: ${GREEN}$domain.key${NC}"
    else
        echo -e "‚ùå Private key file: ${RED}$domain.key${NC} (Ch∆∞a c√≥)"
    fi
    
    echo ""
    
    # Ki·ªÉm tra SSL hi·ªán t·∫°i
    echo -e "${BLUE}üîí TR·∫†NG TH√ÅI SSL HI·ªÜN T·∫†I${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    local current_ssl=$(get_current_ssl_type "$domain")
    echo -e "SSL ƒëang d√πng: $current_ssl"
    echo ""
    
    # N·∫øu ƒë√£ c√≥ c·∫£ 2 file, hi·ªÉn th·ªã menu c·∫•u h√¨nh
    if [[ -f "$cert_file" && -f "$key_file" ]]; then
        echo -e "${GREEN}‚úÖ C·∫£ 2 file SSL ƒë√£ s·∫µn s√†ng!${NC}"
        echo ""
        echo -e "${BLUE}üîß T√ôY CH·ªåN C·∫§U H√åNH SSL${NC}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "1. D√πng SSL m·∫∑c ƒë·ªãnh c·ªßa FrankenPHP (Let's Encrypt)"
        echo "2. D√πng SSL th·ªß c√¥ng"
        echo ""
        echo "0. Quay l·∫°i"
        echo ""
        
        read -p "L·ª±a ch·ªçn: " ssl_choice
        
        case $ssl_choice in
            1)
                configure_ssl_auto "$domain"
                ;;
            2)
                configure_ssl_manual "$domain"
                ;;
            0)
                show_single_site_dashboard "$domain"
                ;;
            *)
                warning "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."
                sleep 1
                setup_custom_ssl "$domain"
                ;;
        esac
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Vui l√≤ng upload ƒë·∫ßy ƒë·ªß 2 file SSL tr∆∞·ªõc khi c·∫•u h√¨nh.${NC}"
        echo ""
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
        show_single_site_dashboard "$domain"
    fi
}

setup_tinyfilemanager() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    local public_dir="$site_dir/public"
    
    # D·ªçn d·∫πp jobs c≈©
    cleanup_tfm_jobs
    
    clear
    show_header "TinyFileManager: $domain"
    
    # Ki·ªÉm tra tr·∫°ng th√°i file TinyFileManager
    local tfm_files=$(find "$public_dir" -name "tinyfilemanager_*.php" 2>/dev/null)
    
    echo -e "${BLUE}üìä TR·∫†NG TH√ÅI TINYFILEMANAGER${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    if [[ -n "$tfm_files" ]]; then
        echo -e "‚úÖ TinyFileManager ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t:"
        echo "$tfm_files" | while read file; do
            echo -e "   ${GREEN}$(basename "$file")${NC}"
        done
        
        # Hi·ªÉn th·ªã file config
        local config_file="$public_dir/config.php"
        if [[ -f "$config_file" ]]; then
            echo -e "üìÅ File config: ${GREEN}config.php${NC}"
        fi
        echo ""
        
        # Hi·ªÉn th·ªã th√¥ng tin ƒëƒÉng nh·∫≠p
        echo -e "${BLUE}üîê TH√îNG TIN ƒêƒÇNG NH·∫¨P${NC}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo -e "Username: ${GREEN}admin${NC} (Full access)"
        echo -e "Username: ${GREEN}user${NC} (View only)"
        echo -e "Password: ${GREEN}ƒê√£ ƒë∆∞·ª£c t·∫°o ng·∫´u nhi√™n${NC}"
        echo ""
        echo -e "üîó Link truy c·∫≠p: ${GREEN}https://$domain/$(basename "$tfm_files")${NC}"
        echo ""
        
        echo -e "${YELLOW}‚ö†Ô∏è  L∆∞u √Ω: File s·∫Ω t·ª± ƒë·ªông x√≥a sau 1 gi·ªù n·∫øu kh√¥ng t·∫Øt.${NC}"
        echo ""
        
        echo "1. T·∫Øt TinyFileManager (X√≥a file)"
        echo "0. Quay l·∫°i"
        echo ""
        
        read -p "L·ª±a ch·ªçn: " choice
        
        case $choice in
            1)
                remove_tinyfilemanager "$domain"
                ;;
            0)
                show_single_site_dashboard "$domain"
                ;;
            *)
                warning "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."
                sleep 1
                setup_tinyfilemanager "$domain"
                ;;
        esac
    else
        echo -e "‚ùå TinyFileManager ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        echo ""
        
        echo -e "${BLUE}üì• C√ÄI ƒê·∫∂T TINYFILEMANAGER${NC}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "TinyFileManager s·∫Ω ƒë∆∞·ª£c t·∫£i t·ª´ GitHub v√† c·∫•u h√¨nh b·∫£o m·∫≠t."
        echo ""
        echo "1. C√†i ƒë·∫∑t TinyFileManager"
        echo "0. Quay l·∫°i"
        echo ""
        
        read -p "L·ª±a ch·ªçn: " choice
        
        case $choice in
            1)
                install_tinyfilemanager "$domain"
                ;;
            0)
                show_single_site_dashboard "$domain"
                ;;
            *)
                warning "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."
                sleep 1
                setup_tinyfilemanager "$domain"
                ;;
        esac
    fi
}

manage_database() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    local public_dir="$site_dir/public"
    local db_config_file="$site_dir/configs/database.conf"
    
    # Ki·ªÉm tra xem c√≥ database config kh√¥ng
    if [[ ! -f "$db_config_file" ]]; then
        clear
        show_header "Qu·∫£n l√Ω Database: $domain"
        echo -e "${YELLOW}Website n√†y ch∆∞a c√≥ database ƒë∆∞·ª£c c·∫•u h√¨nh.${NC}"
        echo ""
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
        show_single_site_dashboard "$domain"
        return
    fi
    
    # Load database config
    source "$db_config_file"
    
    while true; do
        clear
        show_header "Qu·∫£n l√Ω Database: $domain"
        
        # Hi·ªÉn th·ªã th√¥ng tin database
        echo -e "${BLUE}üìã TH√îNG TIN DATABASE${NC}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo -e "Database User: ${GREEN}$DB_USER${NC}"
        echo -e "Database Password: ${GREEN}$DB_PASSWORD${NC}"
        echo -e "Database Name: ${GREEN}$DB_NAME${NC}"
        
        # L·∫•y th√¥ng tin database
        local db_info=$(get_database_info "$DB_NAME")
        echo -e "Database Info: ${GREEN}$db_info${NC}"
        echo ""
        
        # Menu options
        echo -e "${BLUE}üîß T√ôY CH·ªåN${NC}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        # Ki·ªÉm tra tr·∫°ng th√°i Adminneo
        local adminneo_files=$(find "$public_dir" -name "adminneo_*.php" 2>/dev/null | wc -l)
        if [[ $adminneo_files -gt 0 ]]; then
            echo "1. Adminneo (PHP Database Manager) - (ƒêANG B·∫¨T)"
        else
            echo "1. Adminneo (PHP Database Manager) - (ƒêANG T·∫ÆT)"
        fi
        
        echo "2. T·∫°o database"
        echo "3. X√≥a database"
        echo "4. Drop database (gi·ªØ user/pass, ch·ªâ x√≥a b·∫£ng)"
        echo "5. ƒê·ªïi m·∫≠t kh·∫©u"
        echo "6. Import database"
        echo "0. Quay l·∫°i"
        echo ""
        
        read -p "L·ª±a ch·ªçn: " choice
        
        case $choice in
            1) install_adminneo "$domain" ;;
            2) create_database_for_site "$domain" ;;
            3) delete_database_for_site "$domain" ;;
            4) drop_database_tables "$domain" ;;
            5) change_database_password "$domain" ;;
            6) import_database "$domain" ;;
            0) show_single_site_dashboard "$domain" ;;
            *) warning "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."; sleep 1 ;;
        esac
    done
}

backup_restore_site() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    local backup_dir="$site_dir/backup"
    
    # T·∫°o th∆∞ m·ª•c backup n·∫øu ch∆∞a c√≥
    mkdir -p "$backup_dir"
    
    while true; do
        clear
        show_header "Backup & Restore: $domain"
        
        # Hi·ªÉn th·ªã danh s√°ch backup
        echo -e "${BLUE}üì¶ DANH S√ÅCH BACKUP${NC}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        
        local backup_count=0
        if [[ -d "$backup_dir" ]]; then
            for backup_folder in "$backup_dir"/*; do
                if [[ -d "$backup_folder" ]]; then
                    ((backup_count++))
                    local folder_name=$(basename "$backup_folder")
                    local file_size=$(du -sh "$backup_folder/files.tar.gz" 2>/dev/null | cut -f1 || echo "0B")
                    local db_size=$(du -sh "$backup_folder/database.sql.gz" 2>/dev/null | cut -f1 || echo "0B")
                    echo -e "${CYAN}$backup_count.${NC} $folder_name"
                    echo -e "   üìÅ Files: ${GREEN}$file_size${NC} | üóÉÔ∏è Database: ${GREEN}$db_size${NC}"
                fi
            done
        fi
        
        if [[ $backup_count -eq 0 ]]; then
            echo -e "${YELLOW}Ch∆∞a c√≥ b·∫£n backup n√†o.${NC}"
        fi
        
        echo ""
        echo -e "${BLUE}üîß T√ôY CH·ªåN${NC}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "b. T·∫°o backup m·ªõi"
        echo "0. Quay l·∫°i"
        echo ""
        
        read -p "L·ª±a ch·ªçn: " choice
        
        case $choice in
            b|B)
                create_backup "$domain"
                ;;
            0)
                show_single_site_dashboard "$domain"
                ;;
            [1-9]*)
                if [[ $choice -le $backup_count && $choice -gt 0 ]]; then
                    manage_backup "$domain" "$choice"
                else
                    warning "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."
                    sleep 1
                fi
                ;;
            *)
                warning "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."
                sleep 1
                ;;
        esac
    done
}

toggle_site_status() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    local current_status=$(get_site_status "$domain")
    
    if [[ "$current_status" == "ON" ]]; then
        # T·∫Øt website
        if [[ -f "$site_dir/Caddyfile" ]]; then
            mv "$site_dir/Caddyfile" "$site_dir/Caddyfile.disabled"
            success "Website $domain ƒë√£ ƒë∆∞·ª£c t·∫Øt."
        else
            warning "Website $domain ƒë√£ ƒë∆∞·ª£c t·∫Øt t·ª´ tr∆∞·ªõc."
        fi
    else
        # B·∫≠t website
        if [[ -f "$site_dir/Caddyfile.disabled" ]]; then
            mv "$site_dir/Caddyfile.disabled" "$site_dir/Caddyfile"
            success "Website $domain ƒë√£ ƒë∆∞·ª£c b·∫≠t."
        else
            warning "Website $domain ƒë√£ ƒë∆∞·ª£c b·∫≠t t·ª´ tr∆∞·ªõc."
        fi
    fi
    
    # Restart FrankenPHP
    systemctl restart frankenphp
    show_single_site_dashboard "$domain"
}

delete_site() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    
    clear
    show_header "X√≥a Website: $domain"
    
    echo -e "${RED}C·∫¢NH B√ÅO: B·∫°n s·∫Øp x√≥a ho√†n to√†n website $domain.${NC}"
    echo "T·∫•t c·∫£ d·ªØ li·ªáu bao g·ªìm files v√† database s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn!"
    echo ""
    echo -e "${RED}ƒê·ªÉ x√°c nh·∫≠n, vui l√≤ng g√µ ch√≠nh x√°c t√™n domain:${NC}"
    read -p "Nh·∫≠p '$domain' ƒë·ªÉ x√°c nh·∫≠n: " confirm_domain
    
    if [[ "$confirm_domain" != "$domain" ]]; then
        warning "Domain kh√¥ng kh·ªõp. H·ªßy x√≥a website."
        sleep 2
        show_single_site_dashboard "$domain"
        return
    fi
    
    echo ""
    if ! read_confirm "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a website $domain?" "n"; then
        info "ƒê√£ h·ªßy x√≥a website."
        sleep 1
        show_single_site_dashboard "$domain"
        return
    fi
    
    # Th·ª±c hi·ªán x√≥a
    info "ƒêang x√≥a website $domain..."
    
    # X√≥a database
    local db_name=$(echo "$domain" | sed 's/\./_/g')_db
    local db_user=$(echo "$domain" | sed 's/\./_/g')_user
    
    if database_exists "$db_name"; then
        load_db_config
        mysql -u root -p"$DB_ROOT_PASSWORD" -e "DROP DATABASE IF EXISTS \`$db_name\`;" 2>/dev/null
        mysql -u root -p"$DB_ROOT_PASSWORD" -e "DROP USER IF EXISTS '$db_user'@'localhost';" 2>/dev/null
        mysql -u root -p"$DB_ROOT_PASSWORD" -e "FLUSH PRIVILEGES;" 2>/dev/null
        success "ƒê√£ x√≥a database $db_name"
    fi
    
    # X√≥a th∆∞ m·ª•c
    if [[ -d "$site_dir" ]]; then
        rm -rf "$site_dir"
        success "ƒê√£ x√≥a th∆∞ m·ª•c website"
    fi
    
    # Restart FrankenPHP
    systemctl restart frankenphp
    
    success "Website $domain ƒë√£ ƒë∆∞·ª£c x√≥a ho√†n to√†n."
    sleep 2
    show_sites_dashboard
}











# Dashboard functions cho c√°c menu kh√°c
show_firewall_dashboard() {
    clear
    show_header "Firewall / Security"
    echo -e "${YELLOW}T√≠nh nƒÉng n√†y s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn sau.${NC}"
    echo ""
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    show_main_dashboard
}

# Header function
show_header() {
    local title="$1"
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${BLUE} $title${NC}"
    echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""
}

# Main function
main() {
    # Ki·ªÉm tra c√†i ƒë·∫∑t
    if [[ ! -d "$WPST_DIR" ]]; then
        error "WPST Panel ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Vui l√≤ng ch·∫°y script c√†i ƒë·∫∑t tr∆∞·ªõc."
    fi
    
    # Ki·ªÉm tra quy·ªÅn root
    if [[ $EUID -ne 0 ]]; then
        error "WPST Panel c·∫ßn ch·∫°y v·ªõi quy·ªÅn root. Vui l√≤ng ch·∫°y: sudo wpst"
    fi
    
    # Kh·ªüi t·∫°o m√†n h√¨nh - hi·ªÉn th·ªã danh s√°ch website tr·ª±c ti·∫øp
    show_sites_dashboard
}

# X·ª≠ l√Ω tham s·ªë d√≤ng l·ªánh
handle_arguments() {
    case $1 in
        "sites"|"1")
            show_sites_dashboard
            ;;
        "firewall"|"2")
            show_firewall_dashboard
            ;;
        "update-frankenphp"|"4")
            update_frankenphp
            ;;
        "restart-frankenphp"|"5")
            restart_frankenphp
            ;;
        "permissions"|"6")
            manage_frankenphp_permissions
            ;;
        "restart-mariadb"|"8")
            restart_mariadb
            ;;
        "--help"|"-h")
            show_help
            ;;
        "--version"|"-v")
            show_version
            ;;
        "")
            main
            ;;
        *)
            error "Tham s·ªë kh√¥ng h·ª£p l·ªá: $1. Ch·∫°y 'wpst --help' ƒë·ªÉ xem h∆∞·ªõng d·∫´n."
            ;;
    esac
}

# Help function
show_help() {
    echo -e "${BLUE}WPST Panel - WordPress Stack Tool${NC}"
    echo ""
    echo "C√°ch s·ª≠ d·ª•ng:"
    echo "  wpst                 M·ªü danh s√°ch website"
    echo "  wpst firewall       M·ªü qu·∫£n l√Ω firewall"
    echo "  wpst update         M·ªü menu c·∫≠p nh·∫≠t"
    echo ""
    echo "T√πy ch·ªçn:"
    echo "  --help, -h          Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n"
    echo "  --version, -v       Hi·ªÉn th·ªã phi√™n b·∫£n"
    echo ""
}

# FrankenPHP functions
update_frankenphp() {
    clear
    show_header "C·∫≠p nh·∫≠t FrankenPHP"
    
    echo -e "${YELLOW}ƒêang ki·ªÉm tra phi√™n b·∫£n FrankenPHP...${NC}"
    
    # L·∫•y phi√™n b·∫£n hi·ªán t·∫°i
    local current_version=$(frankenphp version 2>/dev/null | head -1 | sed 's/.*version //' || echo "Unknown")
    echo -e "Phi√™n b·∫£n local: ${GREEN}$current_version${NC}"
    
    # L·∫•y phi√™n b·∫£n m·ªõi nh·∫•t t·ª´ GitHub
    local latest_version=$(curl -s https://api.github.com/repos/php/frankenphp/releases/latest | grep '"tag_name"' | cut -d'"' -f4 | sed 's/v//' 2>/dev/null || echo "Unknown")
    echo -e "Phi√™n b·∫£n GitHub: ${GREEN}$latest_version${NC}"
    
    echo ""
    echo -e "${YELLOW}B·∫°n c√≥ mu·ªën c·∫≠p nh·∫≠t kh√¥ng? (y/n)${NC}"
    read -p "L·ª±a ch·ªçn: " choice
    if [[ "$choice" == "y" || "$choice" == "Y" ]]; then
        echo -e "${YELLOW}ƒêang c·∫≠p nh·∫≠t FrankenPHP...${NC}"
        # TODO: Implement update logic based on install.sh
        echo -e "${GREEN}C·∫≠p nh·∫≠t th√†nh c√¥ng!${NC}"
    else
        echo -e "${BLUE}B·ªè qua c·∫≠p nh·∫≠t.${NC}"
    fi
    
    echo ""
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    show_main_dashboard
}

restart_frankenphp() {
    clear
    show_header "Restart FrankenPHP"
    
    echo -e "${YELLOW}ƒêang restart FrankenPHP...${NC}"
    systemctl restart frankenphp
    
    if systemctl is-active --quiet frankenphp; then
        echo -e "${GREEN}FrankenPHP ƒë√£ ƒë∆∞·ª£c restart th√†nh c√¥ng!${NC}"
    else
        echo -e "${RED}L·ªói khi restart FrankenPHP!${NC}"
    fi
    
    echo ""
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    show_main_dashboard
}

manage_frankenphp_permissions() {
    clear
    show_header "Ph√¢n quy·ªÅn FrankenPHP"
    
    echo -e "${YELLOW}ƒêang ph√¢n quy·ªÅn FrankenPHP...${NC}"
    echo ""
    
    # Ph√¢n quy·ªÅn th∆∞ m·ª•c /etc/frankenphp/
    echo -e "${CYAN}ƒêang ph√¢n quy·ªÅn /etc/frankenphp/...${NC}"
    chown -R frankenphp:frankenphp /etc/frankenphp/
    find /etc/frankenphp/ -type f -exec chmod 644 {} \;
    find /etc/frankenphp/ -type d -exec chmod 755 {} \;
    echo -e "${GREEN}‚úì Ho√†n th√†nh ph√¢n quy·ªÅn /etc/frankenphp/${NC}"
    
    # Ph√¢n quy·ªÅn th∆∞ m·ª•c /var/www/
echo -e "${CYAN}ƒêang ph√¢n quy·ªÅn /var/www/...${NC}"
chown -R frankenphp:frankenphp /var/www/
find /var/www/ -type f -exec chmod 644 {} \;
find /var/www/ -type d -exec chmod 755 {} \;
echo -e "${GREEN}‚úì Ho√†n th√†nh ph√¢n quy·ªÅn /var/www/${NC}"
    
    echo ""
    echo -e "${GREEN}Ph√¢n quy·ªÅn FrankenPHP ho√†n t·∫•t!${NC}"
    echo ""
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    show_main_dashboard
}



restart_mariadb() {
    clear
    show_header "Restart MariaDB"
    
    echo -e "${YELLOW}ƒêang restart MariaDB...${NC}"
    systemctl restart mariadb
    
    if systemctl is-active --quiet mariadb; then
        echo -e "${GREEN}MariaDB ƒë√£ ƒë∆∞·ª£c restart th√†nh c√¥ng!${NC}"
    else
        echo -e "${RED}L·ªói khi restart MariaDB!${NC}"
    fi
    
    echo ""
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    show_main_dashboard
}



# Helper functions for site management
validate_domain() {
    local domain="$1"
    
    # Ki·ªÉm tra format domain
    if [[ ! "$domain" =~ ^[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?(\.[a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?)*$ ]]; then
        return 1
    fi
    
    # Ki·ªÉm tra ƒë·ªô d√†i
    if [[ ${#domain} -gt 253 ]]; then
        return 1
    fi
    
    return 0
}

trim() {
    local var="$*"
    # X√≥a kho·∫£ng tr·∫Øng ƒë·∫ßu v√† cu·ªëi
    var="${var#"${var%%[![:space:]]*}"}"   # X√≥a ƒë·∫ßu
    var="${var%"${var##*[![:space:]]}"}"   # X√≥a cu·ªëi
    echo "$var"
}

site_exists() {
    local domain="$1"
    [[ -d "$SITES_DIR/$domain" ]]
}

get_server_ip() {
    # L·∫•y IP public c·ªßa server
    local ip
    ip=$(curl -s -4 ifconfig.me 2>/dev/null) || \
    ip=$(curl -s -4 ipinfo.io/ip 2>/dev/null) || \
    ip=$(hostname -I | awk '{print $1}')
    echo "$ip"
}

check_dns_pointing() {
    local domain="$1"
    local server_ip="$2"
    
    if [[ -z "$server_ip" ]]; then
        server_ip=$(get_server_ip)
    fi
    
    # Ki·ªÉm tra A record
    local resolved_ip
    resolved_ip=$(dig +short "$domain" | tail -n1)
    
    if [[ "$resolved_ip" == "$server_ip" ]]; then
        return 0
    else
        return 1
    fi
}

read_confirm() {
    local message="$1"
    local default="${2:-n}"
    
    while true; do
        if [[ "$default" == "y" ]]; then
            read -p "$message [Y/n]: " yn
            yn=${yn:-y}
        else
            read -p "$message [y/N]: " yn
            yn=${yn:-n}
        fi
        
        case $yn in
            [Yy]*) return 0 ;;
            [Nn]*) return 1 ;;
            *) warning "Vui l√≤ng nh·∫≠p y ho·∫∑c n." ;;
        esac
    done
}

show_warning_box() {
    local title="$1"
    local content="$2"
    
    echo -e "${YELLOW}"
    echo "‚ö†Ô∏è  $title"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "$content"
    echo -e "${NC}"
}

create_site_with_rollback() {
    local domain="$1"
    local create_database="$2"
    local install_wordpress="$3"
    
    local rollback_steps=()
    
    # Step 1: T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c theo thi·∫øt k·∫ø
    info "T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c..."
    local site_dir="$SITES_DIR/$domain"
    
    # T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c ƒë·∫ßy ƒë·ªß theo CHAT.txt
    mkdir -p "$site_dir"/{public,ssl,backup,logs,configs}
    

    
    # Ph√¢n quy·ªÅn cho frankenphp user
    chown -R frankenphp:frankenphp "$site_dir"
    chmod -R 755 "$site_dir"

    
    # T·∫°o file log tr·ªëng v√† set permissions
    touch "$site_dir/logs/access.log" 2>/dev/null || true
    chown frankenphp:frankenphp "$site_dir/logs/access.log" 2>/dev/null || true
    chmod 644 "$site_dir/logs/access.log" 2>/dev/null || true
    
    rollback_steps+=("rm -rf $site_dir")
    
    # Step 2: T·∫°o database n·∫øu c·∫ßn
    local db_name=""
    local db_user=""
    local db_password=""
    
    if [[ "$create_database" == "y" ]]; then
        info "T·∫°o database..."
        
        db_name=$(echo "$domain" | sed 's/\./_/g')_db
        db_user=$(echo "$domain" | sed 's/\./_/g')_user
        db_password=$(generate_password 16)
        
        if ! create_site_database "$db_name" "$db_user" "$db_password"; then
            rollback_site_creation "${rollback_steps[@]}"
            return 1
        fi
        
        # L∆∞u th√¥ng tin database v√†o configs
        cat > "$site_dir/configs/database.conf" << EOF
DB_NAME="$db_name"
DB_USER="$db_user"
DB_PASSWORD="$db_password"
EOF
        chmod 600 "$site_dir/configs/database.conf"
        chown frankenphp:frankenphp "$site_dir/configs/database.conf"
        
        rollback_steps+=("drop_site_database $db_name $db_user")
    fi
    
    # Step 3: C√†i WordPress n·∫øu c·∫ßn
    if [[ "$install_wordpress" == "y" ]]; then
        info "T·∫£i v√† c√†i ƒë·∫∑t WordPress..."
        
        if ! install_wordpress_for_site "$domain" "$db_name" "$db_user" "$db_password"; then
            rollback_site_creation "${rollback_steps[@]}"
            return 1
        fi
    else
        # T·∫°o index.php ƒë∆°n gi·∫£n
        cat > "$site_dir/public/index.php" << EOF
<?php
echo "<h1>Website $domain</h1>";
echo "<p>Website ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!</p>";
echo "<p>B·∫°n c√≥ th·ªÉ upload code c·ªßa m√¨nh v√†o th∆∞ m·ª•c public.</p>";
?>
EOF
    fi
    
    # Step 4: T·∫°o Caddyfile
    info "T·∫°o c·∫•u h√¨nh Caddy..."
    
    if ! create_site_caddyfile "$domain"; then
        rollback_site_creation "${rollback_steps[@]}"
        return 1
    fi
    

    
    # Step 5: Ki·ªÉm tra v√† s·ª≠a Caddyfile ch√≠nh
    info "Ki·ªÉm tra Caddyfile ch√≠nh..."
    
    # ƒê·∫£m b·∫£o Caddyfile ch√≠nh c√≥ import pattern ƒë√∫ng
    if ! grep -q "import.*/var/www" /etc/frankenphp/Caddyfile; then
        warning "Caddyfile ch√≠nh kh√¥ng c√≥ import pattern, ƒëang s·ª≠a..."
        cat > /etc/frankenphp/Caddyfile << EOF
{
	frankenphp {
		num_threads auto
		max_threads auto
		max_wait_time 10
	}
}

# Import site configurations
import /var/www/*/Caddyfile
EOF
        chown frankenphp:frankenphp /etc/frankenphp/Caddyfile
        chmod 644 /etc/frankenphp/Caddyfile
    fi
    
    # Step 6: Ph√¢n quy·ªÅn ƒë·∫ßy ƒë·ªß cho FrankenPHP
    info "Ph√¢n quy·ªÅn cho FrankenPHP..."
    
    # Ph√¢n quy·ªÅn to√†n b·ªô th∆∞ m·ª•c /var/www/
    chown -R frankenphp:frankenphp /var/www/
    find /var/www/ -type d -exec chmod 755 {} \;
    find /var/www/ -type f -exec chmod 644 {} \;
    
    # Ph√¢n quy·ªÅn ƒë·∫∑c bi·ªát cho WordPress files
    find /var/www/ -name "wp-config.php" -exec chmod 600 {} \; 2>/dev/null || true
    find /var/www/ -name ".htaccess" -exec chmod 644 {} \; 2>/dev/null || true
    find /var/www/ -name "index.php" -exec chmod 644 {} \; 2>/dev/null || true
    
    info "Kh·ªüi ƒë·ªông l·∫°i FrankenPHP..."
    
    if ! systemctl restart frankenphp; then
        warning "Kh√¥ng th·ªÉ restart FrankenPHP, ƒëang th·ª≠ l·∫°i..."
        sleep 2
        if ! systemctl restart frankenphp; then
            error "Kh√¥ng th·ªÉ restart FrankenPHP service."
            rollback_site_creation "${rollback_steps[@]}"
            return 1
        fi
    fi
    
    # Ki·ªÉm tra FrankenPHP ƒë√£ ch·∫°y ch∆∞a
    if systemctl is-active --quiet frankenphp; then
        success "FrankenPHP ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông l·∫°i th√†nh c√¥ng."
    else
        warning "FrankenPHP service c√≥ th·ªÉ ch∆∞a ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng."
    fi
    
    success "Website $domain ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!"
    
    # Ki·ªÉm tra website c√≥ ho·∫°t ƒë·ªông kh√¥ng
    info "Ki·ªÉm tra website..."
    sleep 3
    
    if curl -s --max-time 10 "https://$domain" >/dev/null 2>&1; then
        success "Website $domain ƒë√£ ho·∫°t ƒë·ªông!"
    else
        warning "Website ch∆∞a ho·∫°t ƒë·ªông. C√≥ th·ªÉ c·∫ßn th√™m th·ªùi gian ƒë·ªÉ SSL ƒë∆∞·ª£c t·∫°o."
    fi
    
    return 0
}

rollback_site_creation() {
    local steps=("$@")
    
    warning "ƒêang rollback do c√≥ l·ªói x·∫£y ra..."
    
    # Th·ª±c hi·ªán rollback theo th·ª© t·ª± ng∆∞·ª£c l·∫°i
    for ((i=${#steps[@]}-1; i>=0; i--)); do
        local step="${steps[i]}"
        info "Rollback: $step"
        
        if [[ "$step" == rm* ]]; then
            eval "$step" 2>/dev/null || true
        elif [[ "$step" == drop_site_database* ]]; then
            local args=($step)
            drop_site_database "${args[1]}" "${args[2]}"
        fi
    done
    
    warning "Rollback ho√†n th√†nh."
}

create_site_database() {
    local db_name="$1"
    local db_user="$2"
    local db_password="$3"
    
    load_db_config
    
    # T·∫°o database
    if ! mysql_query "CREATE DATABASE \`$db_name\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"; then
        error "Kh√¥ng th·ªÉ t·∫°o database $db_name"
        return 1
    fi
    
    # T·∫°o user
    if ! mysql_query "CREATE USER '$db_user'@'localhost' IDENTIFIED BY '$db_password';"; then
        error "Kh√¥ng th·ªÉ t·∫°o user $db_user"
        mysql_query "DROP DATABASE \`$db_name\`;" 2>/dev/null
        return 1
    fi
    
    # C·∫•p quy·ªÅn
    if ! mysql_query "GRANT ALL PRIVILEGES ON \`$db_name\`.* TO '$db_user'@'localhost';"; then
        error "Kh√¥ng th·ªÉ c·∫•p quy·ªÅn cho user $db_user"
        mysql_query "DROP USER '$db_user'@'localhost';" 2>/dev/null
        mysql_query "DROP DATABASE \`$db_name\`;" 2>/dev/null
        return 1
    fi
    
    mysql_query "FLUSH PRIVILEGES;"
    
    return 0
}

drop_site_database() {
    local db_name="$1"
    local db_user="$2"
    
    load_db_config
    
    mysql_query "DROP DATABASE IF EXISTS \`$db_name\`;" 2>/dev/null
    mysql_query "DROP USER IF EXISTS '$db_user'@'localhost';" 2>/dev/null
    mysql_query "FLUSH PRIVILEGES;" 2>/dev/null
}

install_wordpress_for_site() {
    local domain="$1"
    local db_name="$2"
    local db_user="$3"
    local db_password="$4"
    
    local site_dir="$SITES_DIR/$domain"
    local public_dir="$site_dir/public"
    
    # Download WordPress
    cd /tmp
    
    if ! wget -q https://wordpress.org/latest.tar.gz; then
        error "Kh√¥ng th·ªÉ t·∫£i WordPress"
        return 1
    fi
    
    # Extract
    if ! tar -xzf latest.tar.gz; then
        error "Kh√¥ng th·ªÉ gi·∫£i n√©n WordPress"
        rm -f latest.tar.gz
        return 1
    fi
    
    # Copy files
    cp -r wordpress/* "$public_dir/"
    rm -rf wordpress latest.tar.gz
    
    # T·∫°o wp-config.php
    if [[ -n "$db_name" ]]; then
        create_wp_config "$public_dir" "$db_name" "$db_user" "$db_password"
    fi
    
    return 0
}

create_wp_config() {
    local public_dir="$1"
    local db_name="$2"
    local db_user="$3"
    local db_password="$4"
    
    # Generate WordPress salts
    local salts=$(curl -s https://api.wordpress.org/secret-key/1.1/salt/)
    
    cat > "$public_dir/wp-config.php" << 'EOF'
<?php
/**
 * The base configuration for WordPress
 *
 * The wp-config.php creation script uses this file during the installation.
 * You don't have to use the website, you can copy this file to "wp-config.php"
 * and fill in the values.
 *
 * This file contains the following configurations:
 *
 * * Database settings
 * * Secret keys
 * * Database table prefix
 * * ABSPATH
 *
 * @link https://developer.wordpress.org/advanced-administration/wordpress/wp-config/
 *
 * @package WordPress
 */

// ** Database settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define( 'DB_NAME', '$db_name' );

/** Database username */
define( 'DB_USER', '$db_user' );

/** Database password */
define( 'DB_PASSWORD', '$db_password' );

/** Database hostname */
define( 'DB_HOST', '127.0.0.1' );

/** Database charset to use in creating database tables. */
define( 'DB_CHARSET', 'utf8mb4' );

/** The database collate type. Don't change this if in doubt. */
define( 'DB_COLLATE', '' );

/**#@+
 * Authentication unique keys and salts.
 *
 * Change these to different unique phrases! You can generate these using
 * the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}.
 *
 * You can change these at any point in time to invalidate all existing cookies.
 * This will force all users to have to log in again.
 *
 * @since 2.6.0
 */
$salts

/**#@-*/

/**
 * WordPress database table prefix.
 *
 * You can have multiple installations in one database if you give each
 * a unique prefix. Only numbers, letters, and underscores please!
 *
 * At the installation time, database tables are created with the specified prefix.
 * Changing this value after WordPress is installed will make your site think
 * it has not been installed.
 *
 * @link https://developer.wordpress.org/advanced-administration/wordpress/wp-config/#table-prefix
 */
$table_prefix = 'wp_';

/**
 * For developers: WordPress debugging mode.
 *
 * Change this to true to enable the display of notices during development.
 * It is strongly recommended that plugin and theme developers use WP_DEBUG
 * in their development environments.
 *
 * For information on other constants that can be used for debugging,
 * visit the documentation.
 *
 * @link https://developer.wordpress.org/advanced-administration/debug/debug-wordpress/
 */
define( 'WP_DEBUG', false );

/* Add any custom values between this line and the "stop editing" line. */

/* That's all, stop editing! Happy publishing. */

/** Absolute path to the WordPress directory. */
if ( ! defined( 'ABSPATH' ) ) {
	define( 'ABSPATH', __DIR__ . '/' );
}

/** Sets up WordPress vars and included files. */
require_once ABSPATH . 'wp-settings.php';
EOF
}

create_site_caddyfile() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    
    # ƒê·∫£m b·∫£o th∆∞ m·ª•c logs t·ªìn t·∫°i v√† c√≥ quy·ªÅn ghi
    mkdir -p "$site_dir/logs"
    chown frankenphp:frankenphp "$site_dir/logs"
    chmod 755 "$site_dir/logs"
    
    # T·∫°o file log tr·ªëng n·∫øu ch∆∞a c√≥
    touch "$site_dir/logs/access.log" 2>/dev/null || true
    chown frankenphp:frankenphp "$site_dir/logs/access.log" 2>/dev/null || true
    chmod 644 "$site_dir/logs/access.log" 2>/dev/null || true
    
    # Detect www vs non-www
    local main_domain="$domain"
    local redirect_domain=""
    
    if [[ "$domain" == www.* ]]; then
        redirect_domain="$domain"
        main_domain="${domain#www.}"
    else
        redirect_domain="www.$domain"
    fi
    
    cat > "$site_dir/Caddyfile" << EOF
# Simple configuration for testing
$main_domain {
    root * $site_dir/public
    php_server
    log {
        output stdout
    }
}
EOF
    
    return 0
}

show_site_creation_summary() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    
    echo ""
    show_success_box "Website T·∫°o Th√†nh C√¥ng!" "Website $domain ƒë√£ ƒë∆∞·ª£c t·∫°o v√† c·∫•u h√¨nh."
    
    echo -e "\n${BLUE}üìã TH√îNG TIN WEBSITE${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo -e "üåê Website: ${GREEN}https://$domain${NC}"
    
    # Database info n·∫øu c√≥
    local db_config_file="$site_dir/configs/database.conf"
    if [[ -f "$db_config_file" ]]; then
        source "$db_config_file"
        
        echo ""
        echo -e "${BLUE}üóÉÔ∏è  TH√îNG TIN DATABASE${NC}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo -e "Database: ${GREEN}$DB_NAME${NC}"
        echo -e "User: ${GREEN}$DB_USER${NC}"
        echo -e "Password: ${GREEN}$DB_PASSWORD${NC}"
    fi
    
    echo ""
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    show_sites_dashboard
}

generate_password() {
    local length="${1:-16}"
    openssl rand -base64 "$length" | tr -d "=+/" | cut -c1-"$length"
}

load_db_config() {
    if [[ -f "$WPST_DIR/config/mariadb_root.conf" ]]; then
        source "$WPST_DIR/config/mariadb_root.conf"
    else
        error "Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh database."
    fi
}

mysql_query() {
    local query="$1"
    load_db_config
    mysql -u root -p"$DB_ROOT_PASSWORD" -e "$query" 2>/dev/null
}

database_exists() {
    local db_name="$1"
    load_db_config
    mysql -u root -p"$DB_ROOT_PASSWORD" -e "USE $db_name;" 2>/dev/null
    return $?
}

user_exists() {
    local username="$1"
    load_db_config
    local count=$(mysql -u root -p"$DB_ROOT_PASSWORD" -e "SELECT COUNT(*) FROM mysql.user WHERE User='$username';" -s -N 2>/dev/null)
    [[ "$count" -gt 0 ]]
}

show_success_box() {
    local title="$1"
    local content="$2"
    
    echo -e "${GREEN}"
    echo "‚úÖ $title"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "$content"
    echo -e "${NC}"
}

# Additional helper functions
get_directory_size() {
    local dir="$1"
    if [[ -d "$dir" ]]; then
        du -sh "$dir" 2>/dev/null | cut -f1
    else
        echo "0B"
    fi
}

get_site_status() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    
    if [[ -f "$site_dir/Caddyfile" ]]; then
        echo "ON"
    elif [[ -f "$site_dir/Caddyfile.disabled" ]]; then
        echo "OFF"
    else
        echo "UNKNOWN"
    fi
}

check_site_ping() {
    local domain="$1"
    if curl -s --max-time 5 "https://$domain" >/dev/null 2>&1; then
        echo "‚úÖ"
    else
        echo "‚ùå"
    fi
}

count_site_backups() {
    local domain="$1"
    local backup_dir="$SITES_DIR/$domain/backup"
    if [[ -d "$backup_dir" ]]; then
        find "$backup_dir" -name "*.tar.gz" | wc -l
    else
        echo "0"
    fi
}

get_ssl_status() {
    local domain="$1"
    # ƒê∆°n gi·∫£n h√≥a - FrankenPHP t·ª± ƒë·ªông SSL
    echo "Auto"
}

get_ssl_info() {
    local domain="$1"
    # ƒê∆°n gi·∫£n h√≥a - FrankenPHP t·ª± ƒë·ªông SSL
    echo "${GREEN}Auto (Let's Encrypt)${NC}"
}

# SSL Helper Functions
get_current_ssl_type() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    local caddyfile="$site_dir/Caddyfile"
    
    if [[ -f "$caddyfile" ]] && grep -q "tls.*\.crt.*\.key" "$caddyfile"; then
        echo "${BLUE}Custom SSL${NC}"
    else
        echo "${GREEN}Let's Encrypt (Auto)${NC}"
    fi
}

configure_ssl_auto() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    local caddyfile="$site_dir/Caddyfile"
    
    # X√≥a d√≤ng tls n·∫øu c√≥
    if [[ -f "$caddyfile" ]]; then
        sed -i '/tls.*\.crt.*\.key/d' "$caddyfile"
        success "ƒê√£ chuy·ªÉn sang SSL t·ª± ƒë·ªông (Let's Encrypt)"
    fi
    
    # Restart FrankenPHP
    systemctl restart frankenphp
    
    echo ""
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    show_single_site_dashboard "$domain"
}

configure_ssl_manual() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    local caddyfile="$site_dir/Caddyfile"
    
    # Th√™m d√≤ng tls v√†o Caddyfile
    if [[ -f "$caddyfile" ]]; then
        # T√¨m d√≤ng root v√† th√™m tls b√™n d∆∞·ªõi
        sed -i "/root.*public/a\    tls $site_dir/ssl/$domain.crt $site_dir/ssl/$domain.key" "$caddyfile"
        success "ƒê√£ chuy·ªÉn sang SSL th·ªß c√¥ng"
    fi
    
    # Restart FrankenPHP
    systemctl restart frankenphp
    
    echo ""
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    show_single_site_dashboard "$domain"
}

# TinyFileManager Functions
install_tinyfilemanager() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    local public_dir="$site_dir/public"
    
    info "ƒêang t·∫£i TinyFileManager..."
    
    # T·∫°o t√™n file ng·∫´u nhi√™n (tƒÉng t·ª´ 4 l√™n 8 k√Ω t·ª±)
    local random_suffix=$(openssl rand -hex 4)
    local filename="tinyfilemanager_${random_suffix}.php"
    local filepath="$public_dir/$filename"
    
    # T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n
    local admin_password=$(openssl rand -base64 12 | tr -d "=+/" | cut -c1-12)
    local user_password=$(openssl rand -base64 12 | tr -d "=+/" | cut -c1-12)
    
    # M√£ h√≥a m·∫≠t kh·∫©u b·∫±ng PHP
    local admin_hash=$(frankenphp php-cli -r "echo password_hash('$admin_password', PASSWORD_DEFAULT);")
    local user_hash=$(frankenphp php-cli -r "echo password_hash('$user_password', PASSWORD_DEFAULT);")
    
    # Copy file t·ª´ local repository
    local tfm_source="$WPST_DIR/lib/tinyfilemanager.php"
    if [[ ! -f "$tfm_source" ]]; then
        error "Kh√¥ng t√¨m th·∫•y file TinyFileManager trong repository local"
        return 1
    fi
    
    if ! cp "$tfm_source" "$filepath"; then
        error "Kh√¥ng th·ªÉ copy TinyFileManager"
        return 1
    fi
    
    # T·∫°o file config.php
    local config_filename="config.php"
    local config_filepath="$public_dir/$config_filename"
    
    cat > "$config_filepath" << EOF
<?php
\$auth_users = array(
    'admin' => '$admin_hash',
    'user' => '$user_hash'
);
\$readonly_users = array(
    'user'
);
?>
EOF
    
    chown frankenphp:frankenphp "$filepath" "$config_filepath"
    chmod 644 "$filepath" "$config_filepath"
    
    success "TinyFileManager ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t!"
    echo ""
    echo -e "${BLUE}üîê TH√îNG TIN ƒêƒÇNG NH·∫¨P${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo -e "Username: ${GREEN}admin${NC} (Full access)"
    echo -e "Password: ${GREEN}$admin_password${NC}"
    echo ""
    echo -e "Username: ${GREEN}user${NC} (View only)"
    echo -e "Password: ${GREEN}$user_password${NC}"
    echo ""
    echo -e "üîó Link truy c·∫≠p: ${GREEN}https://$domain/$filename${NC}"
    echo -e "üìÅ File config: ${GREEN}https://$domain/$config_filename${NC}"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  L∆∞u √Ω: File s·∫Ω t·ª± ƒë·ªông x√≥a sau 1 gi·ªù n·∫øu kh√¥ng t·∫Øt.${NC}"
    echo ""
    
    # T·∫°o job ƒë·ªÉ x√≥a file sau 1 gi·ªù v·ªõi PID tracking
    (
        sleep 3600
        if [[ -f "$filepath" ]]; then
            rm -f "$filepath"
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] TinyFileManager $filename ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông x√≥a" >> /tmp/tfm_cleanup.log
        fi
        if [[ -f "$config_filepath" ]]; then
            rm -f "$config_filepath"
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Config config.php ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông x√≥a" >> /tmp/tfm_cleanup.log
        fi
    ) &
    local cleanup_pid=$!
    echo "$cleanup_pid:$filepath:$config_filepath" >> /tmp/tfm_jobs.txt
    
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    setup_tinyfilemanager "$domain"
}

remove_tinyfilemanager() {
    local domain="$1"
    local public_dir="$SITES_DIR/$domain/public"
    
    # D·ª´ng t·∫•t c·∫£ background jobs li√™n quan ƒë·∫øn auto-delete
    jobs -p | xargs -r kill 2>/dev/null || true
    
    # X√≥a t·∫•t c·∫£ file tinyfilemanager v√† config
    find "$public_dir" -name "tinyfilemanager_*.php" -delete
    rm -f "$public_dir/config.php"
    
    success "TinyFileManager ƒë√£ ƒë∆∞·ª£c t·∫Øt!"
    echo ""
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    setup_tinyfilemanager "$domain"
}

# TinyFileManager cleanup functions
cleanup_tfm_jobs() {
    # D·ªçn d·∫πp c√°c jobs ƒë√£ ho√†n th√†nh
    if [[ -f /tmp/tfm_jobs.txt ]]; then
        while IFS=: read -r pid filepath config_filepath; do
            if [[ -n "$pid" && -n "$filepath" ]]; then
                # Ki·ªÉm tra xem process c√≤n ch·∫°y kh√¥ng
                if ! kill -0 "$pid" 2>/dev/null; then
                    # Process ƒë√£ k·∫øt th√∫c, x√≥a kh·ªèi danh s√°ch
                    sed -i "/^$pid:/d" /tmp/tfm_jobs.txt
                fi
                # Ki·ªÉm tra xem file c√≤n t·ªìn t·∫°i kh√¥ng
                if [[ ! -f "$filepath" ]]; then
                    # File ƒë√£ b·ªã x√≥a, d·ª´ng process
                    kill "$pid" 2>/dev/null || true
                    sed -i "/^$pid:/d" /tmp/tfm_jobs.txt
                fi
                # Ki·ªÉm tra xem config file c√≤n t·ªìn t·∫°i kh√¥ng
                if [[ -n "$config_filepath" && ! -f "$config_filepath" ]]; then
                    # Config file ƒë√£ b·ªã x√≥a, d·ª´ng process
                    kill "$pid" 2>/dev/null || true
                    sed -i "/^$pid:/d" /tmp/tfm_jobs.txt
                fi
            fi
        done < /tmp/tfm_jobs.txt
    fi
}

# Backup & Restore Functions
create_backup() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    local backup_dir="$site_dir/backup"
    local public_dir="$site_dir/public"
    local db_config_file="$site_dir/configs/database.conf"
    
    # Ki·ªÉm tra xem c√≥ database config kh√¥ng
    if [[ ! -f "$db_config_file" ]]; then
        warning "Website n√†y ch∆∞a c√≥ database ƒë∆∞·ª£c c·∫•u h√¨nh."
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
        backup_restore_site "$domain"
        return
    fi
    
    # Load database config
    source "$db_config_file"
    
    # T·∫°o t√™n backup folder
    local backup_name=$(date '+%Y%m%d_%H%M%S')_$domain
    local backup_folder="$backup_dir/$backup_name"
    
    info "ƒêang t·∫°o backup cho $domain..."
    
    # T·∫°o th∆∞ m·ª•c backup
    mkdir -p "$backup_folder"
    
    # Backup files
    info "Backup files..."
    if [[ -d "$public_dir" ]]; then
        tar -czf "$backup_folder/files.tar.gz" -C "$site_dir" public/
        success "Files ƒë√£ ƒë∆∞·ª£c backup: $(du -sh "$backup_folder/files.tar.gz" | cut -f1)"
    else
        warning "Th∆∞ m·ª•c public kh√¥ng t·ªìn t·∫°i."
    fi
    
    # Backup database
    info "Backup database..."
    if database_exists "$DB_NAME"; then
        load_db_config
        mysqldump -u root -p"$DB_ROOT_PASSWORD" "$DB_NAME" | gzip > "$backup_folder/database.sql.gz"
        success "Database ƒë√£ ƒë∆∞·ª£c backup: $(du -sh "$backup_folder/database.sql.gz" | cut -f1)"
    else
        warning "Database $DB_NAME kh√¥ng t·ªìn t·∫°i."
    fi
    
    # T·∫°o file info
    cat > "$backup_folder/info.txt" << EOF
Backup created: $(date)
Domain: $domain
Database: $DB_NAME
Files size: $(du -sh "$backup_folder/files.tar.gz" 2>/dev/null | cut -f1 || echo "N/A")
Database size: $(du -sh "$backup_folder/database.sql.gz" 2>/dev/null | cut -f1 || echo "N/A")
EOF
    
    success "Backup ho√†n th√†nh: $backup_name"
    echo ""
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    backup_restore_site "$domain"
}

manage_backup() {
    local domain="$1"
    local choice="$2"
    local site_dir="$SITES_DIR/$domain"
    local backup_dir="$site_dir/backup"
    
    # T√¨m backup folder theo s·ªë th·ª© t·ª±
    local backup_count=0
    local selected_backup=""
    
    for backup_folder in "$backup_dir"/*; do
        if [[ -d "$backup_folder" ]]; then
            ((backup_count++))
            if [[ $backup_count -eq $choice ]]; then
                selected_backup="$backup_folder"
                break
            fi
        fi
    done
    
    if [[ -z "$selected_backup" ]]; then
        warning "Kh√¥ng t√¨m th·∫•y backup."
        sleep 1
        backup_restore_site "$domain"
        return
    fi
    
    local backup_name=$(basename "$selected_backup")
    
    clear
    show_header "Qu·∫£n l√Ω Backup: $backup_name"
    
    echo -e "${BLUE}üì¶ TH√îNG TIN BACKUP${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    if [[ -f "$selected_backup/info.txt" ]]; then
        cat "$selected_backup/info.txt"
    fi
    
    echo ""
    echo -e "${BLUE}üîß T√ôY CH·ªåN${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "1. Restore backup"
    echo "2. X√≥a backup"
    echo "0. Quay l·∫°i"
    echo ""
    
    read -p "L·ª±a ch·ªçn: " subchoice
    
    case $subchoice in
        1)
            restore_backup "$domain" "$selected_backup"
            ;;
        2)
            delete_backup "$domain" "$selected_backup"
            ;;
        0)
            backup_restore_site "$domain"
            ;;
        *)
            warning "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá."
            sleep 1
            manage_backup "$domain" "$choice"
            ;;
    esac
}

restore_backup() {
    local domain="$1"
    local backup_folder="$2"
    local site_dir="$SITES_DIR/$domain"
    local public_dir="$site_dir/public"
    local db_config_file="$site_dir/configs/database.conf"
    
    clear
    show_header "Restore Backup: $domain"
    
    echo -e "${RED}C·∫¢NH B√ÅO: Restore s·∫Ω ghi ƒë√® to√†n b·ªô d·ªØ li·ªáu hi·ªán t·∫°i!${NC}"
    echo ""
    
    if ! read_confirm "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën restore?" "n"; then
        info "ƒê√£ h·ªßy restore."
        sleep 1
        backup_restore_site "$domain"
        return
    fi
    
    info "ƒêang restore backup..."
    
    # Restore files
    if [[ -f "$backup_folder/files.tar.gz" ]]; then
        info "Restore files..."
        rm -rf "$public_dir"
        tar -xzf "$backup_folder/files.tar.gz" -C "$site_dir"
        success "Files ƒë√£ ƒë∆∞·ª£c restore."
    fi
    
    # Restore database
    if [[ -f "$backup_folder/database.sql.gz" && -f "$db_config_file" ]]; then
        info "Restore database..."
        source "$db_config_file"
        load_db_config
        
        # Drop v√† recreate database
        mysql -u root -p"$DB_ROOT_PASSWORD" -e "DROP DATABASE IF EXISTS \`$DB_NAME\`;" 2>/dev/null
        mysql -u root -p"$DB_ROOT_PASSWORD" -e "CREATE DATABASE \`$DB_NAME\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;" 2>/dev/null
        
        # Import database
        gunzip -c "$backup_folder/database.sql.gz" | mysql -u root -p"$DB_ROOT_PASSWORD" "$DB_NAME"
        success "Database ƒë√£ ƒë∆∞·ª£c restore."
    fi
    
    # Restart FrankenPHP
    systemctl restart frankenphp
    
    success "Restore ho√†n th√†nh!"
    echo ""
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    backup_restore_site "$domain"
}

delete_backup() {
    local domain="$1"
    local backup_folder="$2"
    local backup_name=$(basename "$backup_folder")
    
    clear
    show_header "X√≥a Backup: $backup_name"
    
    echo -e "${RED}C·∫¢NH B√ÅO: B·∫°n s·∫Øp x√≥a backup $backup_name${NC}"
    echo ""
    
    if ! read_confirm "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a backup n√†y?" "n"; then
        info "ƒê√£ h·ªßy x√≥a backup."
        sleep 1
        backup_restore_site "$domain"
        return
    fi
    
    rm -rf "$backup_folder"
    success "Backup $backup_name ƒë√£ ƒë∆∞·ª£c x√≥a."
    echo ""
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    backup_restore_site "$domain"
}

# Version function
show_version() {
    echo "WPST Panel phi√™n b·∫£n 1.0.0"
}

# Database helper functions
get_database_info() {
    local db_name="$1"
    load_db_config
    
    # L·∫•y th√¥ng tin database
    local charset=$(mysql -u root -p"$DB_ROOT_PASSWORD" -e "SELECT DEFAULT_CHARACTER_SET_NAME FROM information_schema.SCHEMATA WHERE SCHEMA_NAME='$db_name';" -s -N 2>/dev/null)
    local collation=$(mysql -u root -p"$DB_ROOT_PASSWORD" -e "SELECT DEFAULT_COLLATION_NAME FROM information_schema.SCHEMATA WHERE SCHEMA_NAME='$db_name';" -s -N 2>/dev/null)
    local table_count=$(mysql -u root -p"$DB_ROOT_PASSWORD" -e "SELECT COUNT(*) FROM information_schema.TABLES WHERE TABLE_SCHEMA='$db_name';" -s -N 2>/dev/null)
    local db_size=$(mysql -u root -p"$DB_ROOT_PASSWORD" -e "SELECT ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS 'DB Size in MB' FROM information_schema.tables WHERE table_schema='$db_name';" -s -N 2>/dev/null)
    
    echo "Charset: $charset, Collation: $collation, Tables: $table_count, Size: ${db_size}MB"
}

import_database() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    local db_config_file="$site_dir/configs/database.conf"
    
    # Ki·ªÉm tra xem c√≥ database config kh√¥ng
    if [[ ! -f "$db_config_file" ]]; then
        warning "Website n√†y ch∆∞a c√≥ database ƒë∆∞·ª£c c·∫•u h√¨nh."
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
        manage_database "$domain"
        return
    fi
    
    # Load database config
    source "$db_config_file"
    
    # Ki·ªÉm tra file database
    local db_file="$site_dir/$domain.db"
    local db_gz_file="$site_dir/$domain.db.gz"
    
    if [[ ! -f "$db_file" && ! -f "$db_gz_file" ]]; then
        clear
        show_header "Import Database: $domain"
        echo -e "${YELLOW}Kh√¥ng t√¨m th·∫•y file database ƒë·ªÉ import.${NC}"
        echo ""
        echo -e "${BLUE}üìã H∆Ø·ªöNG D·∫™N IMPORT DATABASE${NC}"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "1. Upload file database v√†o th∆∞ m·ª•c: $site_dir"
        echo "2. ƒê·∫∑t t√™n file l√†: $domain.db ho·∫∑c $domain.db.gz"
        echo "3. Ch·∫°y l·∫°i t√≠nh nƒÉng Import database"
        echo ""
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
        manage_database "$domain"
        return
    fi
    
    clear
    show_header "Import Database: $domain"
    
    echo -e "${RED}C·∫¢NH B√ÅO: Import s·∫Ω ghi ƒë√® to√†n b·ªô database hi·ªán t·∫°i!${NC}"
    echo ""
    
    if ! read_confirm "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën import database?" "n"; then
        info "ƒê√£ h·ªßy import database."
        sleep 1
        manage_database "$domain"
        return
    fi
    
    info "ƒêang import database..."
    
    # Drop database hi·ªán t·∫°i
    load_db_config
    mysql -u root -p"$DB_ROOT_PASSWORD" -e "DROP DATABASE IF EXISTS \`$DB_NAME\`;" 2>/dev/null
    mysql -u root -p"$DB_ROOT_PASSWORD" -e "CREATE DATABASE \`$DB_NAME\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;" 2>/dev/null
    
    # Import database
    if [[ -f "$db_gz_file" ]]; then
        # Import t·ª´ file .gz
        gunzip -c "$db_gz_file" | mysql -u root -p"$DB_ROOT_PASSWORD" "$DB_NAME"
        success "Database ƒë√£ ƒë∆∞·ª£c import t·ª´ file: $domain.db.gz"
    elif [[ -f "$db_file" ]]; then
        # Import t·ª´ file .db
        mysql -u root -p"$DB_ROOT_PASSWORD" "$DB_NAME" < "$db_file"
        success "Database ƒë√£ ƒë∆∞·ª£c import t·ª´ file: $domain.db"
    fi
    
    echo ""
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    manage_database "$domain"
}

# Adminneo installation/toggle
install_adminneo() {
    local domain="$1"
    local public_dir="$SITES_DIR/$domain/public"
    local site_dir="$SITES_DIR/$domain"
    local db_config_file="$site_dir/configs/database.conf"
    
    # Ki·ªÉm tra xem ƒë√£ c√≥ file Adminneo ch∆∞a
    local existing_files=$(find "$public_dir" -name "adminneo_*.php" 2>/dev/null)
    
    if [[ -n "$existing_files" ]]; then
        # N·∫øu ƒë√£ c√≥ file, h·ªèi c√≥ mu·ªën t·∫Øt kh√¥ng
        clear
        show_header "T·∫Øt Adminneo: $domain"
        echo -e "${YELLOW}Adminneo ƒëang ch·∫°y. B·∫°n c√≥ mu·ªën t·∫Øt kh√¥ng?${NC}"
        echo ""
        
        if read_confirm "T·∫Øt Adminneo v√† x√≥a file?" "n"; then
            # D·ª´ng t·∫•t c·∫£ background jobs li√™n quan ƒë·∫øn Adminneo
            jobs -p | xargs -r kill 2>/dev/null || true
            
            # X√≥a t·∫•t c·∫£ file Adminneo
            find "$public_dir" -name "adminneo_*.php" -delete
            
            success "Adminneo ƒë√£ ƒë∆∞·ª£c t·∫Øt!"
            echo ""
            read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
            manage_database "$domain"
            return
        else
            info "ƒê√£ h·ªßy t·∫Øt Adminneo."
            sleep 1
            manage_database "$domain"
            return
        fi
    fi
    
    # N·∫øu ch∆∞a c√≥ file, c√†i ƒë·∫∑t m·ªõi
    if [[ ! -f "$db_config_file" ]]; then
        warning "Website n√†y ch∆∞a c√≥ database ƒë∆∞·ª£c c·∫•u h√¨nh."
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
        manage_database "$domain"
        return
    fi
    
    # Load database config
    source "$db_config_file"
    
    # T·∫°o random suffix 8 ch·ªØ s·ªë
    local random_suffix=$(openssl rand -hex 4)
    local filename="adminneo_${random_suffix}.php"
    local filepath="$public_dir/$filename"
    
    # Copy file t·ª´ local repository
    local adminneo_source="$WPST_DIR/lib/adminneo.php"
    if [[ ! -f "$adminneo_source" ]]; then
        error "Kh√¥ng t√¨m th·∫•y file Adminneo trong repository local"
        return 1
    fi
    
    if ! cp "$adminneo_source" "$filepath"; then
        error "Kh√¥ng th·ªÉ copy Adminneo"
        return 1
    fi
    
    chown frankenphp:frankenphp "$filepath"
    chmod 644 "$filepath"
    
    success "Adminneo ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t!"
    echo ""
    echo -e "${BLUE}üîê TH√îNG TIN ƒêƒÇNG NH·∫¨P DATABASE${NC}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo -e "Database Server: ${GREEN}127.0.0.1${NC}"
    echo -e "Database User: ${GREEN}$DB_USER${NC}"
    echo -e "Database Password: ${GREEN}$DB_PASSWORD${NC}"
    echo -e "Database Name: ${GREEN}$DB_NAME${NC}"
    echo ""
    echo -e "üîó Link truy c·∫≠p: ${GREEN}https://$domain/$filename${NC}"
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  L∆∞u √Ω: File s·∫Ω t·ª± ƒë·ªông x√≥a sau 30 ph√∫t n·∫øu kh√¥ng t·∫Øt.${NC}"
    echo ""
    
    # T·∫°o job ƒë·ªÉ x√≥a file sau 30 ph√∫t v·ªõi PID tracking
    (
        sleep 1800  # 30 ph√∫t
        if [[ -f "$filepath" ]]; then
            rm -f "$filepath"
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] Adminneo $filename ƒë√£ ƒë∆∞·ª£c t·ª± ƒë·ªông x√≥a" >> /tmp/adminneo_cleanup.log
        fi
    ) &
    local cleanup_pid=$!
    echo "$cleanup_pid:$filepath" >> /tmp/adminneo_jobs.txt
    
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    manage_database "$domain"
}

# Create database for site
create_database_for_site() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    local db_config_file="$site_dir/configs/database.conf"
    
    # Ki·ªÉm tra xem ƒë√£ c√≥ database ch∆∞a
    if [[ -f "$db_config_file" ]]; then
        source "$db_config_file"
        if database_exists "$DB_NAME"; then
            warning "Database $DB_NAME ƒë√£ t·ªìn t·∫°i. Vui l√≤ng x√≥a tr∆∞·ªõc khi t·∫°o m·ªõi."
            read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
            manage_database "$domain"
            return
        fi
    fi
    
    # T·∫°o th√¥ng tin database m·ªõi
    local db_name=$(echo "$domain" | sed 's/\./_/g')_db
    local db_user=$(echo "$domain" | sed 's/\./_/g')_user
    local db_password=$(generate_password 16)
    
    # T·∫°o database v√† user
    if create_site_database "$db_name" "$db_user" "$db_password"; then
        # L∆∞u th√¥ng tin v√†o config
        mkdir -p "$site_dir/configs"
        cat > "$db_config_file" << EOF
DB_NAME="$db_name"
DB_USER="$db_user"
DB_PASSWORD="$db_password"
EOF
        chmod 600 "$db_config_file"
        chown frankenphp:frankenphp "$db_config_file"
        
        success "Database ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!"
        echo -e "Database: ${GREEN}$db_name${NC}"
        echo -e "User: ${GREEN}$db_user${NC}"
        echo -e "Password: ${GREEN}$db_password${NC}"
    else
        error "Kh√¥ng th·ªÉ t·∫°o database"
    fi
    
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    manage_database "$domain"
}

# Delete database for site
delete_database_for_site() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    local db_config_file="$site_dir/configs/database.conf"
    
    if [[ ! -f "$db_config_file" ]]; then
        warning "Website n√†y ch∆∞a c√≥ database."
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
        manage_database "$domain"
        return
    fi
    
    source "$db_config_file"
    
    clear
    show_header "X√≥a Database: $domain"
    show_warning_box "C·∫¢NH B√ÅO" "B·∫°n s·∫Øp x√≥a ho√†n to√†n database $DB_NAME.\nT·∫•t c·∫£ d·ªØ li·ªáu bao g·ªìm tables, user, v√† password s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn!"
    
    echo -e "\n${RED}ƒê·ªÉ x√°c nh·∫≠n, vui l√≤ng g√µ ch√≠nh x√°c t√™n database:${NC}"
    read -p "Nh·∫≠p '$DB_NAME' ƒë·ªÉ x√°c nh·∫≠n: " confirm_db
    
    if [[ "$confirm_db" != "$DB_NAME" ]]; then
        warning "Database name kh√¥ng kh·ªõp. H·ªßy x√≥a database."
        sleep 2
        manage_database "$domain"
        return
    fi
    
    if ! read_confirm "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a database $DB_NAME?" "n"; then
        info "ƒê√£ h·ªßy x√≥a database."
        sleep 1
        manage_database "$domain"
        return
    fi
    
    # Th·ª±c hi·ªán x√≥a
    info "ƒêang x√≥a database $DB_NAME..."
    
    drop_site_database "$DB_NAME" "$DB_USER"
    rm -f "$db_config_file"
    
    success "Database $DB_NAME ƒë√£ ƒë∆∞·ª£c x√≥a ho√†n to√†n."
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    manage_database "$domain"
}

# Drop database tables (keep user/pass)
drop_database_tables() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    local db_config_file="$site_dir/configs/database.conf"
    
    if [[ ! -f "$db_config_file" ]]; then
        warning "Website n√†y ch∆∞a c√≥ database."
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
        manage_database "$domain"
        return
    fi
    
    source "$db_config_file"
    
    clear
    show_header "Drop Database Tables: $domain"
    show_warning_box "C·∫¢NH B√ÅO" "B·∫°n s·∫Øp x√≥a t·∫•t c·∫£ tables trong database $DB_NAME.\nUser v√† password s·∫Ω ƒë∆∞·ª£c gi·ªØ nguy√™n, ch·ªâ x√≥a d·ªØ li·ªáu!"
    
    if ! read_confirm "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a t·∫•t c·∫£ tables?" "n"; then
        info "ƒê√£ h·ªßy drop tables."
        sleep 1
        manage_database "$domain"
        return
    fi
    
    # Th·ª±c hi·ªán drop tables
    info "ƒêang x√≥a t·∫•t c·∫£ tables trong database $DB_NAME..."
    
    load_db_config
    mysql -u root -p"$DB_ROOT_PASSWORD" -e "USE \`$DB_NAME\`; SHOW TABLES;" -s -N 2>/dev/null | while read table; do
        if [[ -n "$table" ]]; then
            mysql -u root -p"$DB_ROOT_PASSWORD" -e "USE \`$DB_NAME\`; DROP TABLE \`$table\`;" 2>/dev/null
            info "ƒê√£ x√≥a table: $table"
        fi
    done
    
    success "T·∫•t c·∫£ tables trong database $DB_NAME ƒë√£ ƒë∆∞·ª£c x√≥a."
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    manage_database "$domain"
}

# Change database password
change_database_password() {
    local domain="$1"
    local site_dir="$SITES_DIR/$domain"
    local db_config_file="$site_dir/configs/database.conf"
    
    if [[ ! -f "$db_config_file" ]]; then
        warning "Website n√†y ch∆∞a c√≥ database."
        read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
        manage_database "$domain"
        return
    fi
    
    source "$db_config_file"
    
    clear
    show_header "ƒê·ªïi M·∫≠t Kh·∫©u Database: $domain"
    echo -e "Database User: ${GREEN}$DB_USER${NC}"
    echo -e "Database Name: ${GREEN}$DB_NAME${NC}"
    echo ""
    
    # T·∫°o password m·ªõi
    local new_password=$(generate_password 16)
    
    if ! read_confirm "B·∫°n c√≥ mu·ªën ƒë·ªïi m·∫≠t kh·∫©u th√†nh: $new_password?" "y"; then
        info "ƒê√£ h·ªßy ƒë·ªïi m·∫≠t kh·∫©u."
        sleep 1
        manage_database "$domain"
        return
    fi
    
    # Th·ª±c hi·ªán ƒë·ªïi password
    info "ƒêang ƒë·ªïi m·∫≠t kh·∫©u cho user $DB_USER..."
    
    load_db_config
    if mysql -u root -p"$DB_ROOT_PASSWORD" -e "ALTER USER '$DB_USER'@'localhost' IDENTIFIED BY '$new_password';" 2>/dev/null; then
        # C·∫≠p nh·∫≠t config file
        cat > "$db_config_file" << EOF
DB_NAME="$DB_NAME"
DB_USER="$DB_USER"
DB_PASSWORD="$new_password"
EOF
        chmod 600 "$db_config_file"
        chown frankenphp:frankenphp "$db_config_file"
        
        success "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·ªïi th√†nh c√¥ng!"
        echo -e "Password m·ªõi: ${GREEN}$new_password${NC}"
    else
        error "Kh√¥ng th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u"
    fi
    
    read -p "Nh·∫•n Enter ƒë·ªÉ quay l·∫°i..."
    manage_database "$domain"
}

# Adminneo cleanup functions
cleanup_adminneo_jobs() {
    # D·ªçn d·∫πp c√°c jobs ƒë√£ ho√†n th√†nh
    if [[ -f /tmp/adminneo_jobs.txt ]]; then
        while IFS=: read -r pid filepath; do
            if [[ -n "$pid" && -n "$filepath" ]]; then
                # Ki·ªÉm tra xem process c√≤n ch·∫°y kh√¥ng
                if ! kill -0 "$pid" 2>/dev/null; then
                    # Process ƒë√£ k·∫øt th√∫c, x√≥a kh·ªèi danh s√°ch
                    sed -i "/^$pid:/d" /tmp/adminneo_jobs.txt
                fi
                # Ki·ªÉm tra xem file c√≤n t·ªìn t·∫°i kh√¥ng
                if [[ ! -f "$filepath" ]]; then
                    # File ƒë√£ b·ªã x√≥a, d·ª´ng process
                    kill "$pid" 2>/dev/null || true
                    sed -i "/^$pid:/d" /tmp/adminneo_jobs.txt
                fi
            fi
        done < /tmp/adminneo_jobs.txt
    fi
}

# Start the application
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    handle_arguments "$1"
fi
